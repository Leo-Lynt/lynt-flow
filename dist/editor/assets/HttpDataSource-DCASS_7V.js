import{m as T}from"./mappings-w7oajga6.js";class g{async fetch(t,e){throw new Error("IDataSource.fetch() must be implemented")}validate(t){throw new Error("IDataSource.validate() must be implemented")}getSourceType(){throw new Error("IDataSource.getSourceType() must be implemented")}}class m extends g{constructor(t="http://localhost:3001/api"){super(),this.apiBaseUrl=t,this.sourceType=null}async fetch(t,e){var a,s,c;const p=`${this.apiBaseUrl}/connectors/execute`,o=(a=e.apiConfig)==null?void 0:a.token,h=this.getSourceType(),l=T(h),{sourceType:S,...d}=t;try{const r=await fetch(p,{method:"POST",headers:{"Content-Type":"application/json",...o&&{Authorization:`Bearer ${o}`},...e.userId&&{"X-User-Id":e.userId}},body:JSON.stringify({sourceType:l,config:d,userId:e.userId})});if(!r.ok){const y=await r.json().catch(()=>({}));throw new Error(y.message||`HTTP ${r.status}: ${r.statusText}`)}const n=await r.json();return((c=(s=n.data)==null?void 0:s.result)==null?void 0:c.data)||n.data}catch(r){throw console.error(`❌ HttpDataSource fetch error (${this.getSourceType()}):`,r.message),r}}validate(t){return{valid:!0,errors:[]}}getSourceType(){return this.sourceType}}class u{static create(t){const e=new m;return e.sourceType=t,e}static createAll(){return["google_sheets","google_analytics","api","json","csv","graphql","database","mk3d"].map(e=>({type:e,adapter:u.create(e)}))}}export{m as HttpDataSource,u as HttpDataSourceFactory};
