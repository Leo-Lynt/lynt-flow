import{u as n}from"./dataUtils-XrCV_Bny.js";function o({nodeData:a,inputs:r}){const e=n(r.a),t=n(r.b);return e===t}function c({nodeData:a,inputs:r}){const e=n(r.a),t=n(r.b);return e!==t}function s({nodeData:a,inputs:r}){const e=n(r.a),t=n(r.b);return e>t}function u({nodeData:a,inputs:r}){const e=n(r.a),t=n(r.b);return e<t}function l({nodeData:a,inputs:r}){const e=n(r.a),t=n(r.b);return e>=t}function b({nodeData:a,inputs:r}){const e=n(r.a),t=n(r.b);return e<=t}function q({nodeData:a,inputs:r}){const e=a.operation||"equals";switch(e){case"equals":return o({nodeData:a,inputs:r});case"not-equals":return c({nodeData:a,inputs:r});case"greater-than":return s({nodeData:a,inputs:r});case"less-than":return u({nodeData:a,inputs:r});case"greater-or-equal":return l({nodeData:a,inputs:r});case"less-or-equal":return b({nodeData:a,inputs:r});default:throw new Error(`Unknown comparison operation: ${e}`)}}function h(a){return{valid:!0,errors:[]}}export{q as compare,o as equals,l as greaterOrEqual,s as greaterThan,b as lessOrEqual,u as lessThan,c as notEquals,h as validate};
