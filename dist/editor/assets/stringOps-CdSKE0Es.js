import{u as o}from"./dataUtils-XrCV_Bny.js";import{f as u}from"./index-vfrSo85q.js";const p=10*1024*1024;function l(t,e){const r=String(t);if(r.length>p)throw new Error(`String too large for ${e} operation (max ${p} bytes)`);return r}function g({nodeData:t,inputs:e}){const r=l(o(e.a),"concat"),a=l(o(e.b),"concat"),n=r+a;if(n.length>p)throw new Error("Concatenated string exceeds maximum length");return n}function f({nodeData:t,inputs:e}){const r=l(o(e.input),"split"),a=l(o(e.separator),"split"),n=r.split(a),c=1e5;if(n.length>c)throw new Error(`Split would create too many parts (max ${c})`);return n}function h({nodeData:t,inputs:e}){const r=l(o(e.input),"replace"),a=l(o(e.search),"replace"),n=l(o(e.replace),"replace"),c=u(a),s=()=>r.replace(new RegExp(c,"g"),n);try{return s()}catch(i){throw new Error(`Replace operation failed: ${i.message}`)}}function m({nodeData:t,inputs:e}){const r=t.templateString||"",a=/\{([^}]+)\}/g;let n=r,c;for(;(c=a.exec(r))!==null;){const s=c[1],i=o(e[s]);i!=null&&(n=n.replace(`{${s}}`,String(i)))}return n}function S({nodeData:t,inputs:e}){const r=t.operation||"concat";switch(r){case"concat":return g({nodeData:t,inputs:e});case"split":return f({nodeData:t,inputs:e});case"replace":return h({nodeData:t,inputs:e});case"template":return m({nodeData:t,inputs:e});default:throw new Error(`Unknown string operation: ${r}`)}}function x(t){const e=["concat","split","replace","template"];return!t.operation||!e.includes(t.operation)?{valid:!1,errors:["Invalid operation"]}:t.operation==="template"&&!t.templateString?{valid:!1,errors:["Template string is required"]}:{valid:!0,errors:[]}}export{S as execute,g as stringConcat,h as stringReplace,f as stringSplit,m as stringTemplate,x as validate};
