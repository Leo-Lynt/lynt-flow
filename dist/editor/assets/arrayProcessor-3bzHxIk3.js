import{u as unwrapData}from"./dataUtils-XrCV_Bny.js";function getValueByPath(e,t){if(!t)return e;const a=t.split(".");let r=e;for(const i of a){if(r==null)return;r=r[i]}return r}function execute({nodeData,inputs}){let inputData=unwrapData(inputs["data-input"]);if(!Array.isArray(inputData))throw new Error("Input deve ser um array");const operation=nodeData.operation||"extract",fieldPath=nodeData.fieldPath,filterValue=nodeData.filterValue;switch(operation){case"extract":if(!fieldPath)throw new Error("fieldPath obrigatório para operação extract");return inputData.map(e=>getValueByPath(e,fieldPath));case"sum":if(!fieldPath)throw new Error("fieldPath obrigatório para operação sum");return inputData.reduce((e,t)=>{const a=Number(getValueByPath(t,fieldPath))||0;return e+a},0);case"average":if(!fieldPath)throw new Error("fieldPath obrigatório para operação average");const sum=inputData.reduce((e,t)=>{const a=Number(getValueByPath(t,fieldPath))||0;return e+a},0);return inputData.length>0?sum/inputData.length:0;case"count":return inputData.length;case"filter":if(!filterValue)throw new Error("filterValue obrigatório para operação filter");return inputData.filter(item=>{try{const value=getValueByPath(item,fieldPath||"value");return eval(filterValue.replace(/value/g,value))}catch{return!1}});case"first":return inputData.length>0?inputData[0]:null;case"last":return inputData.length>0?inputData[inputData.length-1]:null;default:throw new Error(`Operação "${operation}" não suportada`)}}function validate(e){const t=[],a=e.operation;return a?(["extract","sum","average"].includes(a)&&!e.fieldPath&&t.push(`Operação "${a}" requer campo "fieldPath"`),a==="filter"&&!e.filterValue&&t.push('Operação "filter" requer campo "filterValue"'),{valid:t.length===0,errors:t}):(t.push('Campo "operation" obrigatório'),{valid:!1,errors:t})}export{execute,validate};
